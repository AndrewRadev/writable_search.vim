*writable_search.txt*	Perform a grep and edit the found results

==============================================================================
CONTENTS                           *writable_search* *writable_search-contents*

    Installation................................: |writable_search-installation|
    Usage.......................................: |writable_search-usage|
    Commands....................................: |writable_search-commands|
    Settings....................................: |writable_search-settings|
    Internals...................................: |writable_search-internals|
    Issues......................................: |writable_search-issues|


==============================================================================
INSTALLATION                                     *writable_search-installation*

There are several ways to install the plugin. The recommended one is by using
Tim Pope's pathogen (http://www.vim.org/scripts/script.php?script_id=2332). In
that case, you can clone the plugin's git repository like so:
>
    git clone git://github.com/AndrewRadev/writable_search.vim.git ~/.vim/bundle/writable_search
<
If your vim configuration is under git version control, you could also set up
the repository as a submodule, which would allow you to update more easily.
The command is (provided you're in ~/.vim):
>
    git submodule add git://github.com/AndrewRadev/writable_search.vim.git bundle/writable_search
<

Another way is to simply copy all the essential directories inside the ~/.vim
directory: autoload, doc, ftplugin, plugin, syntax.


==============================================================================
USAGE                                                   *writable_search-usage*

                                                              *:WritableSearch*

The plugin exposes the command |WritableSearch|, which takes a search query
and performs a grep (or ack, or any other search command), with that query.
For example:
>
    :WritableSearch function_call\(
<
The results are opened in a new tab (by default), and are very similar to what
you would get from performing the search on the command-line. The difference
is that you can now edit this buffer and, upon writing, the original files
will be updated with the changes.

This gives you a very simple and straightforward search-and-replace process.
However, read this document to the end for some important gotchas.

If you change the filenames in the header blocks, those files will be renamed
(with some manual confirmation that you can turn off if you're feeling
adventurous). For example, if the header says:
>
    foo/bar.txt:12-34
<
and you change that to:
>
    foo/renamed.txt:12-34
<
Then the file "foo/bar.txt" will be renamed to "foo/renamed.txt". If this is
not possible, you'll get an error.

If you change the line numbers displayed in the headers, the virtual "window"
that this search result is pointing to will reposition itself to those line
numbers. For example, if the header says:
>
    foo/bar.txt:12-34
<
and you change that to:
>
    foo/bar.txt:10-22
<
Then the lines displayed will now be the ones from 10 to 22.

The command :Rerun defined in the search buffer can be used to perform the
last search again, with additional flags. For example:
>
    :WritableSearch function_call\(
    :Rerun -C1
<
If you call the |:WritableSearch| command with no arguments, it will take the
word under the cursor and search for that. If you call it while having marked
something in visual mode (with `:'<,'>WritableSearch`), it will use the
current visual selection as the search query.

By default, the plugin searches either with `egrep`, or, if you have the
`ack.vim` plugin installed, with your `g:ackprg`. To change this behavior, see
|g:writable_search_command_type|.

If you want to plug in your own, potentially complicated search expression,
and have the plugin make it writable for you, you can put the results in a
buffer and invoke the parsing function directly:
>
    :call writable_search#Parse()
<
This will try to parse the contents of the buffer and turn them into a
writable_search buffer. However, the format must be the same as the output of
grep with the options "-n/--line-number" and "-H/--with-filename". This looks
like this:
>
    <filename>-<line>-<text...>
    <filename>:<line>:<text with a match...>
    <filename>-<line>-<text...>
    --
    <filename>:<line>:<text with a match...>
<
An example:
>
    autoload/writable_search/proxy.vim-26-" to adjust next proxies.
    autoload/writable_search/proxy.vim:27:function! writable_search#proxy#UpdateSource(new_lines, adjustment) dict
    autoload/writable_search/proxy.vim-28-  let new_lines = a:new_lines
    --
    autoload/writable_search/parser.vim:1:function! writable_search#parser#Run()
    autoload/writable_search/parser.vim-2-  let grouped_lines = s:PartitionLines(getbufline('%', 1, '$'))
    --
    autoload/writable_search/parser.vim-25-  for lines in a:grouped_lines
    autoload/writable_search/parser.vim:26:    let current_proxy          = writable_search#proxy#New(bufnr('%'))
    autoload/writable_search/parser.vim-27-    let current_proxy.filename = s:FindFilename(lines)
<
The resulting writable_search buffer for this example would look like so:
>
    autoload/writable_search/proxy.vim:26-28
     " to adjust next proxies.
     function! writable_search#proxy#UpdateSource(new_lines, adjustment) dict
       let new_lines = a:new_lines
    autoload/writable_search/parser.vim:1-2
     function! writable_search#parser#Run()
       let grouped_lines = s:PartitionLines(getbufline('%', 1, '$'))
    autoload/writable_search/parser.vim:25-27
       for lines in a:grouped_lines
         let current_proxy          = writable_search#proxy#New(bufnr('%'))
         let current_proxy.filename = s:FindFilename(lines)
<
Important notes:

    - Notice that each piece of code has been indented with a single extra
      space. This has been done to make parsing the results possible and you
      should never put anything in column 1 yourself.

    - You should never delete a result item yourself, or add new ones. The
      parser will get confused and error out.

==============================================================================
SETTINGS                                             *writable_search-settings*

                                               *g:writable_search_command_type*
>
    let g:writable_search_command_type = "ack"
<

Default value: "egrep" or "ack.vim" if ack.vim plugin is detected
Possible values: "egrep", "ack", "ack.vim"

The command type to use to perform the search. If the value is "egrep", then
the command used will be:
>
    egrep <query> . -R -n -H -C3 <flags>
>
If the value is "ack", then the command will be:
>
    ack <query> -H --nogroup -C3 <flags>
>
If the value is "ack.vim", then the plugin will try to use the contents of
`g:ackprg`, by adding on the flags for the "ack" type.

These are the only supported types at this time.

Note: You could use "ag" as well. Unfortunately, there are some issues with it
at the moment, so it wouldn't work correctly when replacing things at the end
of a file.

                                         *g:writable_search_new_buffer_command*
>
    let g:writable_search_new_buffer_command = 'new'
<

Default value: "tabnew"

When the command |:WritableSearch| is executed, it opens a new buffer. This
command is the one that is used for that operation. You can use any
buffer-opening command like "new", "splitbelow vertical new", etc.

                                        *g:writable_search_confirm_file_rename*
>
    let g:writable_search_confirm_file_rename = 0
<

Default value: 1

If this setting is 1 (the default), the plugin will ask for confirmation when
it decides to rename a file. Setting it to 0 would skip the check and rename
it directly, making the process faster, though potentially more unsafe.

                                              *g:writable_search_context_lines*
>
    let g:writable_search_context_lines = 5
<

Default value: 3

This controls how many lines of context around the match should be shown.
Internally, it's simply handed down to the search command's "-C" flag. If it's
set to 0, a "-C" flag will not be provided. Remember that you can use ":Rerun"
to change this on a case-by-case basis.


==============================================================================
ISSUES                                                 *writable_search-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/writable_search.vim/issues


vim:tw=78:sw=4:ft=help:norl:
